{"version":3,"sources":["logo.svg","components/HelloCubeWrapper.js","threeSrc/hello-cube.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HelloCubeWrapper","sceneReference","camera","scene","renderer","geometry","material","mesh","xchange","ychange","document","addEventListener","THREE","window","innerWidth","innerHeight","position","z","add","antialias","setSize","appendChild","domElement","animate","requestAnimationFrame","rotation","x","y","render","helloCube","this","ref","element","Component","App","className","src","logo","alt","href","target","rel","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,oNCGtBC,E,mLCDN,SAASC,GACpB,IAAIC,EAAQC,EAAOC,EACfC,EAAUC,EAAUC,EACpBC,EAASC,EAEbC,SAASC,iBAAiB,SA8B1B,WAEIH,GAAoB,IACpBC,GAAoB,QA3BpBP,EAAS,IAAIU,IAAyB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,IAAM,KACjFC,SAASC,EAAI,EAEpBd,EAAQ,IAAIS,IAEZJ,EAAU,IACVC,EAAU,IAEVJ,EAAW,IAAIO,IAAmB,GAAK,GAAK,IAC5CN,EAAW,IAAIM,IAEfL,EAAO,IAAIK,IAAYP,EAAUC,GAIjCH,EAAMe,IAAKX,IAEXH,EAAW,IAAIQ,IAAqB,CAAEO,WAAW,KACxCC,QAASP,OAAOC,WAAW,EAAGD,OAAOE,YAAY,GAE1Dd,EAAeoB,YAAYjB,EAASkB,YASxC,SAASC,IAELC,sBAAuBD,GAEvBhB,EAAKkB,SAASC,GAAKlB,EACnBD,EAAKkB,SAASE,GAAKlB,EAEnBL,EAASwB,OAAQzB,EAAOD,GAxC5BqB,GDJIM,CAAUC,KAAK3B,S,+BAGV,IAAD,OACJ,OACI,yBAAK4B,IAAK,SAAAC,GAAO,OAAI,EAAK7B,MAAQ6B,S,GAPAC,aE4B/BC,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,6BACE,kBAAC,EAAD,MAAmB,kBAAC,EAAD,OAErB,+CAAoB,6BAApB,aCbYC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.244c6bae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport helloCube from '../threeSrc/hello-cube';\r\n\r\nexport default class HelloCubeWrapper extends Component {\r\n    componentDidMount(){\r\n        helloCube(this.scene);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div ref={element => this.scene = element} />\r\n        );\r\n    }\r\n}","import * as THREE from '../../node_modules/three/build/three.module.js';\r\n\r\nexport default function(sceneReference) {\r\n    var camera, scene, renderer;\r\n    var geometry, material, mesh;\r\n    var xchange, ychange;\r\n\r\n    document.addEventListener('click', speedUp);\r\n    init();\r\n    animate();\r\n\r\n    function init() {\r\n\r\n        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );\r\n        camera.position.z = 1;\r\n\r\n        scene = new THREE.Scene();\r\n\r\n        xchange = .01;\r\n        ychange = .02;\r\n\r\n        geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );\r\n        material = new THREE.MeshNormalMaterial();\r\n\r\n        mesh = new THREE.Mesh( geometry, material );\r\n\r\n       \r\n\r\n        scene.add( mesh );\r\n\r\n        renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n        renderer.setSize( window.innerWidth/5, window.innerHeight/5 );\r\n\r\n        sceneReference.appendChild(renderer.domElement);\r\n        \r\n    }\r\n\r\n    function speedUp(){\r\n\r\n        xchange = xchange + .01;\r\n        ychange = ychange + .02;\r\n    }\r\n    function animate() {\r\n\r\n        requestAnimationFrame( animate );\r\n\r\n        mesh.rotation.x += xchange;\r\n        mesh.rotation.y += ychange;\r\n\r\n        renderer.render( scene, camera );\r\n\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HelloCubeWrapper from './components/HelloCubeWrapper.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <div>\n          <HelloCubeWrapper/><HelloCubeWrapper/>\n        </div>\n        <p>Hello new friends<br/>-Sam W</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}